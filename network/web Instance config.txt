
**************************************|  web Instance config  |********************************************

1. We now need to install all of the necessary components needed to run our front-end application. 
   Again, start by installing NVM and node :
   
sudo su ubuntu
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.38.0/install.sh | bash
source ~/.bashrc
nvm install 16
nvm use 16

2. Now we need to download our web tier code from our s3 bucket. You must have uploaded it to s3 before.

cd ~/
aws s3 cp s3://BUCKET_NAME/web-tier/ web-tier --recursive

3. Navigate to the web-layer folder and create the build folder for the react app so we can serve our code:

cd ~/web-tier
npm install 
npm run build        # before running build, remove "react-app/jest" from the package.json file in 
					 # web-tier folder 


3. NGINX can be used for different use cases like load balancing, content caching etc, but we will be
   using it as a web server that we will configure to serve our application on port 80, as well as help 
   direct our API calls to the internal load balancer.

sudo apt update && apt install nginx

4. We will now have to configure NGINX. Navigate to the Nginx configuration file with the following 
   commands and list the files in the directory:
   
cd /etc/nginx
ls

5. You should see an nginx.conf file. Weâ€™re going to delete this file and use the one we uploaded to s3. 
   Replace the bucket name in the command below with the one you created for this workshop:
   
sudo rm nginx.conf
sudo aws s3 cp s3://BUCKET_NAME/nginx.conf .			# you may ask to install and configure aws cli

sudo service nginx restart

6. To make sure Nginx has permission to access our files execute this command:

chmod -R 755 /home/ubuntu		 # please check the permissions of this directory before altering 
								 # them recursively

7. And then to make sure the service starts on boot, run this command:

sudo systemctl enable nginx


Now when you plug in the public IP of your web tier instance, you should see your website
